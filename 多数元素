class Solution {
    public int majorityElement(int[] nums) {
        int i=0;//自增
        int j=0;//计算重复数量
        int k=nums[0];//控制要拿来比对的元素是哪个
        for(int num : nums){
            if(j==0)
                k=num;
            if(num==k){
                j++;
            }else
                j--;
            }
        return k;
        }
    }
//Boyer-Moore 算法
//候选者b的票数把候选者a的票数抵消至0，我就暂且认为候选者b是预备总统，但是这个此消彼长的投票互相抵消的过程还会继续下去，候选者a仍然有可能是最终总统



给定一个大小为 n 的数组 nums ，返回其中的多数元素。多数元素是指在数组中出现次数 大于 ⌊ n/2 ⌋ 的元素。
你可以假设数组是非空的，并且给定的数组总是存在多数元素。

 

示例 1：

输入：nums = [3,2,3]
输出：3
示例 2：

输入：nums = [2,2,1,1,1,2,2]
输出：2
 

提示：
n == nums.length
1 <= n <= 5 * 104
-109 <= nums[i] <= 109
 

进阶：尝试设计时间复杂度为 O(n)、空间复杂度为 O(1) 的算法解决此问题。
